#version 330

uniform mat4 model;
uniform vec3 camera_position;

//material settings
uniform sampler2D material_tex;
uniform float material_shininess;
uniform vec3 material_specular_color;

uniform struct Light
{
  vec3 position;
  vec3 intensities;
  float attenuation;
  float ambient_coefficient;
} light;

in vec3 frag_vert;
in vec2 frag_tex_coord;
in vec3 frag_normal;

out vec4 final_color;


void main()
{
  vec3 normal = normalize(transpose(inverse(mat3(model))) * frag_normal);
  vec3 surface_pos = vec3(model * vec4(frag_vert, 1));
  vec4 surface_color = texture(material_tex, frag_tex_coord);
  vec3 surface_to_light = normalize(light.position - surface_pos);
  vec3 surface_to_camera = normalize(camera_position - surface_pos);

  //ambient
  vec3 ambient = light.ambient_coefficient * surface_color.rgb * light.intensities;

  //diffuse
  float diffuse_coefficient = max(0.0, dot(normal, surface_to_light));
  vec3 diffuse = diffuse_coefficient * surface_color.rgb * light.intensities;

  //specular
  float specular_coefficient = 0.0;
  if(diffuse_coefficient > 0.0)
    specular_coefficient = pow(max(0.0, dot(surface_to_camera, reflect(-surface_to_light, normal))), material_shininess);
  vec3 specular = specular_coefficient * material_specular_color * light.intensities;

  //attenuation
  float distance_to_light = length(light.position - surface_pos);
  float attenuation = 100.0 / (1.0 + light.attenuation * pow(distance_to_light, 2));
  //float attenuation = 1.0;
  //linear color (color before gamma correction)
  vec3 linear_color = ambient + attenuation * (diffuse + specular);

  //final color (after gamma correction)
  vec3 gamma = vec3(1.0/2.2);
  final_color = vec4(pow(linear_color, gamma), surface_color.a);
}
